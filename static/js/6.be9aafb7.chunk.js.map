{"version":3,"sources":["components/MoviesListings/MovieListing/index.js","components/MoviesListings/index.js","assets/StyledComponents/Movie.jsx","components/Movie/index.js","components/MovieId/index.js","Pages/Movie.jsx"],"names":["MovieListing","movie","poster_path","unavailable_poster_image","config","TMDB","POSTER_ROOT_W342","useTranslation","t","vote_average","MoviesListings","movie_props","path","window","location","pathname","split","props","MovieCard","GridContainer","direction","justify","alignItems","length","map","prop","key","GridItem","xs","sm","md","lg","xl","toLocaleLowerCase","LoaderSpinner","MovieContainer","styled","div","MovieTitle","MovieSubTitle","p","MovieHomepage","a","MovieInformation","MovieTitleInformation","span","MovieNumberInformation","MovieHeader","h1","MovieSectionHeader","MovieSmallText","MovieOverview","MovieBody","MovieVideo","MoviePoster","img","MovieGenre","Movie","video","useEffect","ACTION_MOVIE_SEARCH","src","POSTER_ROOT_W780","title","icon","faStar","color","vote_count","faStopwatch","runtime","tagline","href","homepage","urlCleaner","overview","release_date","faCalendarAlt","faFileInvoice","numberLocalisation","budget","faHandHoldingUsd","revenue","genres","genre","name","toLowerCase","site","url","playing","width","height","controls","MovieId","movieId","language","error","useState","moviesValue","setMoviesValue","similarMovies","setSimilarMovies","videos","setVideos","currentMovie","setCurrentMovie","currentGenre","setCurrentGenre","currentLanguage","setCurrentLanguage","MovieBackgroundElement","BACKDROP_ROOT","backdrop_path","GetMovies","Api_QueryMovie","Api_Similar","Api_Videos","className","replace","connect","state","adult","render","dispatch","ACTION_SET_ERROR","parseInt","to"],"mappings":"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","file":"static/js/6.be9aafb7.chunk.js","sourcesContent":["//#region Imports\r\n\r\n// Import react components\r\nimport React from 'react';\r\nimport { Link } from \"react-router-dom\";\r\n\r\n// Import multilanguage component\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\n// Import image\r\nimport unavailable_poster_image from \"../../../assets/images/unavailable_movie_poster.jpg\"\r\n\r\n// Import grid components\r\nimport GridItem from \"../../Grid/GridItem.jsx\";\r\n\r\n// Import custom configurations functions\r\nimport {config} from '../../../config';\r\n\r\n// Import custom helper functions\r\nimport {genreRetriever} from '../../../Helpers'\r\n\r\n// Import styled components\r\nimport {MovieCardPoster, MovieCardTitle, MovieCardItem, MovieRating, MovieCardElement, MovieCardGenre, MovieCardGenres} from \"../../../assets/StyledComponents/MovieCard\";\r\n\r\n//#endregion\r\n\r\n/**\r\n * MovieListing function\r\n *  \r\n * This function takes a single movie object as a parameter and then uses Grid Items to style it. The parent component which will request this file will have a wrapping\r\n * GridContainer component.\r\n * \r\n * @name MovieListing\r\n * @function\r\n * @param {Object} movie the movie object to create the card\r\n * @returns {Componet} A styled component from the passed movie object. The returned component will be wrapped around a link component to the movie. The link will then take the\r\n * user to the movie search page.\r\n */\r\nexport default function MovieListing(movie){\r\n  // A let is used to declare the movie rating due to a looping error when using use state\r\n  let movieRatingClass = \"Average\";\r\n  //The movie poster to be rendered on the left. In the case that no movie poster is returned the custom unavailable_poster_image image is used\r\n  const imageSource = movie.movie.poster_path === null ? unavailable_poster_image : config.TMDB.POSTER_ROOT_W342+movie.movie.poster_path;\r\n  // Get the translation component to be used to switch between different languages\r\n  const { t } = useTranslation(\"\");\r\n\r\n  //set the movie rating for the red, grey, green colours.\r\n  switch (true){\r\n    case (movie.movie.vote_average <= 4): movieRatingClass = \"Bad\"; break;\r\n    case (movie.movie.vote_average < 7): movieRatingClass = \"Average\"; break;\r\n    case (movie.movie.vote_average >= 7): movieRatingClass = \"Good\"; break;\r\n    default: break;\r\n  }\r\n\r\n  return(\r\n    //Wrap the movie card with a link to the same move\r\n    <Link to={`/Movie/${movie.movie.id}`}>\r\n        <MovieCardItem>\r\n          <GridItem xs={12}>\r\n            {/*Movie Title*/}\r\n            <MovieCardTitle>{movie.movie.title}</MovieCardTitle>\r\n            {/*Movie Card and Rating Element*/}\r\n            <MovieCardElement>\r\n              <MovieRating>\r\n                <div className={movieRatingClass}>{movie.movie.vote_average}/10</div>\r\n              </MovieRating>\r\n              <MovieCardPoster src={imageSource}></MovieCardPoster>\r\n            </MovieCardElement>\r\n            <br />\r\n          </GridItem>\r\n          {/*Movie Genres*/}\r\n          <GridItem xs={12}>\r\n            <MovieCardGenres>{movie.movie.genre_ids.map((genre, key) => <MovieCardGenre key={key}><i>{t(`genres:${genreRetriever(genre).toLowerCase()}`)}</i></MovieCardGenre>)}</MovieCardGenres>\r\n          </GridItem>\r\n        </MovieCardItem>\r\n    </Link>\r\n  );\r\n}","//#region Imports\r\n\r\n// Import react components\r\nimport React from 'react';\r\n\r\n// Import grid components\r\nimport GridItem from \"../Grid/GridItem.jsx\";\r\nimport GridContainer from \"../Grid/GridContainer.jsx\";\r\n\r\n// Import multilanguage component\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\n// Import custom components\r\nimport MovieListing from './MovieListing';\r\nimport LoaderSpinner from '../../components/LoaderSpinner'\r\n\r\n// Import styled components\r\nimport {MovieCardContainer, MovieHeader} from \"../../assets/StyledComponents/MovieCard\";\r\n\r\n//#endregion\r\n\r\n/**\r\n * MovieListing function\r\n *  \r\n * This function takes a list of movie objects as a parameter and then uses a Grid Container and the MovieListing components to render a grid of movie cards.\r\n * \r\n * @name MoviesListings\r\n * @function\r\n * @param {Object} movie_props a list of movie object to create cards for\r\n * @returns {StyledComponent} A styled component from the passed movie object. The returned component will be wrapped around a link component to the movie. The link will then take the\r\n * user to the movie search page.\r\n */\r\nexport default function MoviesListings(movie_props){\r\n  // Get the translation component to be used to switch between different languages\r\n  const { t } = useTranslation(\"\");\r\n  const path = window.location.pathname.split(\"/\")[2];\r\n\r\n  return(\r\n    //Render the movie grid. While the movie grid is being built a spinner is shown\r\n    movie_props.props ? (\r\n      <MovieCardContainer>\r\n        <GridContainer \r\n          direction=\"row\"\r\n          justify=\"space-evenly\"\r\n          alignItems=\"center\"\r\n        >\r\n          {(movie_props.props.length > 0)\r\n            ? (movie_props.props.map((prop, key) => {\r\n              return(\r\n                <GridItem key={key} xs={12} sm={12} md={6} lg={4} xl={3}>\r\n                  <MovieListing movie={prop} />\r\n                </GridItem>\r\n              );\r\n            })\r\n            ):(\r\n              //if path is in movie do not show this message as that is part of the similar movies\r\n              path && path.toLocaleLowerCase() !== \"movie\" &&  path.toLocaleLowerCase() !== \"latest\" ? <MovieHeader>{t(\"common:no_results\")}</MovieHeader> : <></>\r\n            )}\r\n        </GridContainer >\r\n      </MovieCardContainer>\r\n    ): (<LoaderSpinner />)\r\n  );\r\n}","//#region Imports\r\n\r\n// Import react styled components\r\nimport styled from 'styled-components';\r\n\r\n//#endregion \r\n\r\n//#region Exported Styled Components\r\n\r\nexport const MovieContainer = styled.div` \r\n    margin-bottom: 50px;\r\n`;\r\n\r\nexport const MovieTitle = styled.div`\r\n    font: Europa;\r\n    color: white;\r\n    font-size: 50px;\r\n    float: left;\r\n`;\r\n\r\nexport const MovieSubTitle = styled.p`\r\n    color: white;\r\n    font-size: 20px;\r\n    margin-bottom: 15px;\r\n    text-align: initial;\r\n\r\n    :before {        \r\n        content: open-quote;\r\n    }\r\n\r\n    :after {        \r\n        content: close-quote;\r\n    }\r\n`;\r\n\r\nexport const MovieHomepage = styled.a`\r\n    color: #93c9ff !important;\r\n    float: left;\r\n`;\r\n\r\nexport const MovieInformation = styled.div`  \r\n    color: white;\r\n    font-size: 20px;\r\n    margin-bottom: 20px;\r\n    text-align: initial;\r\n\r\n    svg {\r\n        margin-right: 10px;\r\n    }\r\n`\r\n\r\nexport const MovieTitleInformation = styled.span`  \r\n    color: white;\r\n    font-size: 18px;\r\n    margin-bottom: 20px;\r\n    margin-left: 20px;\r\n    text-align: initial;\r\n\r\n    svg {\r\n        margin-right: 10px;\r\n    }\r\n`\r\n\r\nexport const MovieNumberInformation = styled.div`\r\n    display: inline-block;\r\n    color: white;\r\n    font-size: 18px;\r\n    margin-bottom: 20px;\r\n    margin-right: 20px;\r\n    float: left;\r\n\r\n    svg {\r\n        margin-right: 10px;\r\n    }\r\n\r\n    .small {\r\n        font-size: 12px;\r\n    }\r\n`\r\n\r\nexport const MovieInformationContainer = styled.div`  \r\n    margin: 20px 0;\r\n`\r\n\r\nexport const MovieHeader = styled.h1`\r\n    color: white;\r\n    text-align: center;\r\n    margin: 25px;\r\n    font-weight: 400;\r\n`;\r\n\r\nexport const MovieSectionHeader = styled.h1`\r\n    color: white;\r\n    text-align: initial;\r\n    font-weight: 400;\r\n`;\r\n\r\nexport const MovieSmallText = styled.span`\r\n    font-size: 12px;\r\n`;\r\n\r\nexport const MovieOverview = styled.p`\r\n    color: white;\r\n    font-size: 16px;\r\n    line-height: 1.5;\r\n    text-align: justify;\r\n`;\r\n\r\nexport const MovieBody = styled.div`\r\n    text-align: center;\r\n    width: auto;\r\n`;\r\n\r\nexport const MovieVideo = styled.div`\r\n    position: relative;\r\n    width: auto;\r\n    margin: 25px auto 60px auto;\r\n`;\r\n\r\nexport const MoviePoster = styled.img`\r\n    width: 70%;\r\n    height: auto;\r\n    border-radius: 10px;\r\n    margin-bottom: 20px;\r\n`;\r\n\r\nexport const MovieGenre = styled.div`\r\n    width: auto;\r\n    color: white;\r\n    margin-right: 15px;\r\n    border-radius: 10px;\r\n    border: solid 1px;\r\n    padding: 0.25em;\r\n    display: inline-block;\r\n    float: left;\r\n    margin-bottom: 10px;\r\n`;\r\n\r\n//#endregion \r\n","//#region Imports\r\n\r\n// Import react components\r\nimport React, { useEffect } from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faCalendarAlt, faStar, faStopwatch, faHandHoldingUsd, faFileInvoice } from '@fortawesome/free-solid-svg-icons'\r\nimport ReactPlayer from 'react-player';\r\n\r\n// Import multilanguage component\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\n// Import grid components\r\nimport GridItem from \"../Grid/GridItem.jsx\";\r\nimport GridContainer from \"../Grid/GridContainer.jsx\";\r\n\r\n// Import styled components\r\nimport {MoviePoster, MovieTitle, MovieVideo, MovieSubTitle, MovieOverview, MovieInformation, MovieTitleInformation, MovieSmallText, MovieNumberInformation, MovieHomepage, MovieHeader, MovieGenre, MovieSectionHeader} from '../../assets/StyledComponents/Movie';\r\n\r\n// Import images\r\nimport unavailable_poster_image from \"../../assets/images/unavailable_movie_poster.jpg\"\r\n\r\n// Import Redux actions\r\nimport {ACTION_MOVIE_SEARCH} from '../../Store/actions/Action'\r\n\r\n// Import custom helper functions\r\nimport {urlCleaner, numberLocalisation} from '../../Helpers'\r\n\r\n// Import custom configurations functions\r\nimport {config} from '../../config';\r\n\r\n//#endregion \r\n\r\n/**\r\n * Movie function\r\n *  \r\n * This function takes two parametes; movie and video, to style and render all the details related to a movie. The backdrop and the similar movies are still handled by the \r\n * MovieId file.\r\n * \r\n * @name Movie\r\n * @function\r\n * @param {Object} movie the movie object as returned from TMDB\r\n * @param {Object} video the video object as returned from TMDB\r\n * @returns {GridContainer} A GridContainer containing several different GridItems all containing different styled aspects of a movie.\r\n */\r\nexport default function Movie({movie, video}) {\r\n    // Get the translation component to be used to switch between different languages\r\n    const { t } = useTranslation(\"\");\r\n\r\n    //Remove the current search as the user would have just searched for something\r\n    useEffect(() => {\r\n        ACTION_MOVIE_SEARCH(\"\")\r\n    },[]);\r\n    \r\n    return (\r\n        <GridContainer\r\n        direction=\"row\"\r\n        justify=\"center\"\r\n        alignItems=\"flex-start\">\r\n            {/* The movie poster to be rendered on the left. In the case that no movie poster is returned the custom unavailable_poster_image image is used */}\r\n            <GridItem xs={12} sm={12} md={4}>\r\n                {(movie.poster_path !== \"\" && movie.poster_path !== null) ?\r\n                    (\r\n                        <MoviePoster src={`${config.TMDB.POSTER_ROOT_W780}/${movie.poster_path}`} />\r\n                    ) : \r\n                    (\r\n                        <MoviePoster src={unavailable_poster_image} />\r\n                    )\r\n                }\r\n            </GridItem>\r\n            {/* The movie details to be shown on the right hand side of the poster. These are further contained within another nested GridContainer */}\r\n            <GridItem xs={12} sm={12} md={8}>\r\n                <GridContainer\r\n                    direction=\"row\"\r\n                    justify=\"space-between\"\r\n                    alignItems=\"flex-start\"\r\n                >\r\n                    {/* Movie Title */}\r\n                    <GridItem sm={12} md={6}>\r\n                        <MovieTitle>\r\n                            {movie.title}\r\n                        </MovieTitle>\r\n                    </GridItem>\r\n                    {/* Movie Rating and Runtime */}\r\n                    <GridItem sm={12} md={6}>\r\n                        <MovieTitleInformation>\r\n                            <FontAwesomeIcon icon={faStar}  color=\"darkgoldenrod\" /> {movie.vote_average}/10 <MovieSmallText>{movie.vote_count} {t(\"movie:voters\")}</MovieSmallText>\r\n                        </MovieTitleInformation>\r\n                        <MovieTitleInformation>\r\n                            <FontAwesomeIcon icon={faStopwatch} color=\"white\"/> {movie.runtime} <MovieSmallText>{t(\"movie:minutes\")}</MovieSmallText>\r\n                        </MovieTitleInformation>\r\n                    </GridItem>\r\n                    {/* Movie Tagline which will have inverted commas inserted through css by the MovieSubTitle styled component */}\r\n                    <GridItem xs={12}>\r\n                    {(movie.tagline !== \"\") ?\r\n                        (\r\n                            <MovieSubTitle>\r\n                                {movie.tagline}\r\n                            </MovieSubTitle>\r\n                        ) : (<></>)\r\n                    }\r\n                    </GridItem>\r\n                    {/* Movie HomePage */}\r\n                    <GridItem xs={12}>\r\n                        <MovieHomepage href={`${movie.homepage}`}>\r\n                            {/* The url cleaner is used to remove the prefix http/s protocols and any trailing '/' */}\r\n                            {urlCleaner(movie.homepage)}\r\n                        </MovieHomepage>\r\n                    </GridItem>\r\n                    {/* Movie OverView */}\r\n                    <GridItem xs={12}>\r\n                        <MovieOverview>\r\n                            {movie.overview}\r\n                        </MovieOverview>\r\n                    </GridItem>\r\n                    {/* Movie Release Date */}\r\n                    <GridItem xs={12}>\r\n                        {(movie.release_date !== \"\") ?\r\n                            (\r\n                                <>\r\n                                    <MovieSectionHeader>{t(\"movie:release\")}</MovieSectionHeader>\r\n                                    <MovieInformation>\r\n                                        <FontAwesomeIcon icon={faCalendarAlt} color=\"white\" /> {movie.release_date}\r\n                                    </MovieInformation>\r\n                                </>\r\n                            ) \r\n                            : \r\n                            (<></>)\r\n                        }\r\n                    </GridItem>\r\n                    {/* Movie Budget and Revenue */}\r\n                    <GridItem xs={12}>\r\n                        <MovieSectionHeader>{t(\"movie:numbers\")}</MovieSectionHeader>\r\n                            <MovieNumberInformation>\r\n                                <FontAwesomeIcon icon={faFileInvoice} color=\"red\" /> {t(\"movie:budget\")} {numberLocalisation(movie.budget)}\r\n                            </MovieNumberInformation>\r\n                            <MovieNumberInformation>\r\n                                <FontAwesomeIcon icon={faHandHoldingUsd} color=\"lightgreen\" /> {t(\"movie:revenue\")} {numberLocalisation(movie.revenue)}\r\n                            </MovieNumberInformation>\r\n                    </GridItem>\r\n                    {/* Movie Genres */}\r\n                    <GridItem xs={12}>\r\n                        <MovieSectionHeader>{t(\"genres:title\")}</MovieSectionHeader>\r\n                        {(movie.genres ? (movie.genres.map((genre, key) => <MovieGenre key={key}>{t(`genres:${genre.name.toLowerCase()}`)}</MovieGenre>)) : (<></>))}\r\n                    </GridItem>\r\n                </GridContainer>\r\n            </GridItem>\r\n            <GridItem xs={12} md={6}>\r\n                {/* Get Related Videos. For simplicity's sake only 1 youtube video is shown*/}\r\n                {video && video.site === 'YouTube' && (\r\n                    <MovieVideo>\r\n                        <MovieHeader>{t(\"movie:trailer\")}</MovieHeader>\r\n                        <ReactPlayer \r\n                            url={`https://www.youtube.com/embed/${video.key}`} \r\n                            playing={true}\r\n                            width=\"100%\" \r\n                            height=\"450px\"\r\n                            controls={true} \r\n                        />\r\n                    </MovieVideo> \r\n                )}\r\n            </GridItem>\r\n        </GridContainer>\r\n    );\r\n}","//#region Imports\r\n\r\n// Import react components\r\nimport React, { useEffect, useState } from 'react';\r\n\r\n// Import multilanguage component\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\n// Import grid components\r\nimport GridContainer from '../Grid/GridContainer';\r\nimport GridItem from '../Grid/GridItem';\r\n\r\n// Import custom components\r\nimport Movie from '../../components/Movie';\r\nimport LoaderSpinner from '../../components/LoaderSpinner';\r\nimport MoviesListings from '../../components/MoviesListings';\r\n\r\n// Import api functions\r\nimport {Api_QueryMovie, Api_Similar, Api_Videos} from '../../api';\r\n\r\n// Import custom configurations functions\r\nimport {config} from '../../config';\r\n\r\n// Import styled components and the styled component from react as it is needed for the backdrop\r\nimport styled from 'styled-components';\r\nimport {MovieContainer, MovieBody, MovieHeader} from '../../assets/StyledComponents/Movie';\r\n\r\n//#endregion\r\n\r\n/**\r\n * MovieId function\r\n *  \r\n * This function takes three parametes; movieId, language and genre, to carry out api requests and then render all the movie. Using styled components and other custom components \r\n * such as Movie\r\n * \r\n * @name MovieId\r\n * @function\r\n * @param {Int16Array} movieId the id of the movie to get from TMDB\r\n * @param {String} language the language of the movie object to be retrieved from TMDB\r\n * @param {String} genre the genre of the similar movies to be retrieved from TMDB\r\n * @param {Dispatch Function} error the dispatch function to trigger an error page rendering\r\n * @returns {StyledComponent} A styled component movie container which will have all the movie components within it.\r\n */\r\nexport default function MovieId({movieId, language, genre, error}) {\r\n    // Current rendered movie useStates\r\n    const [moviesValue, setMoviesValue] = useState(\"\");\r\n    const [similarMovies, setSimilarMovies] = useState(\"\");\r\n    const [videos, setVideos] = useState([]);\r\n    const [currentMovie, setCurrentMovie] = useState(-1);\r\n    const [currentGenre, setCurrentGenre] = useState(-1);\r\n    const [currentLanguage, setCurrentLanguage] = useState('en');\r\n\r\n    // Get the translation component to be used to switch between different languages\r\n    const { t } = useTranslation(\"\");\r\n\r\n    // Create a styled component with the backdrop related to the movie object\r\n    const MovieBackgroundElement = styled.div`    \r\n        background: url(${config.TMDB.BACKDROP_ROOT}/${moviesValue.backdrop_path}) center center / cover no-repeat fixed;\r\n        position: fixed;\r\n        top: 0px;\r\n        filter: saturate(0.5) opacity(0.3);\r\n        width: 100%;\r\n        max-width: 100%;\r\n        height: 100%;\r\n        z-index: -1;\r\n    `\r\n\r\n    // On every page update check if the page parameters have changed.\r\n    useEffect(() => {\r\n        const GetMovies = async () => {\r\n            setMoviesValue(await Api_QueryMovie(movieId, language, false, error));     \r\n            setSimilarMovies(await Api_Similar(movieId, language, genre, error));  \r\n            const videos = await Api_Videos(movieId, language, error);\r\n            //Otherwise this causes an error\r\n            if(videos.length > 0)\r\n                setVideos(...videos);  \r\n            else    \r\n                setVideos([]);\r\n        }\r\n\r\n        // If current Movie (the one that is rendered on screen) is different from the passed movieId and language parameters then update the current movie\r\n        // Otherwise do nothing. This condition safeguards against an infinite update loop\r\n        if(currentMovie !== movieId || currentLanguage !== language || currentGenre !== genre){\r\n            setCurrentMovie(movieId);\r\n            setCurrentLanguage(language);\r\n            setCurrentGenre(genre)\r\n            GetMovies();\r\n        }\r\n    })\r\n\r\n    return (\r\n        <MovieContainer>\r\n            {/* The backdrop element to be used as a canvas */}\r\n            {(moviesValue.backdrop_path) ? (\r\n                <MovieBackgroundElement />\r\n            ): (<></>)}\r\n            {/* The grid container whose children will display the movie (using the Movie custom component) and a grid of similar movies */}\r\n            <GridContainer\r\n                direction=\"row\"\r\n                justify=\"space-between\"\r\n                alignItems=\"flex-start\"\r\n            >\r\n                {/* The movie details. A spinner will be shown while the movie is loading */}\r\n                <GridItem xs={12}>\r\n                    <MovieBody>\r\n                        <section className=\"Results\">\r\n                            {moviesValue && videos ? (<Movie movie={moviesValue} video={videos}/>) : (<LoaderSpinner />)}\r\n                        </section>\r\n                    </MovieBody> \r\n                </GridItem>  \r\n                {/* The similar movies grid. A spinner will be shown while the movie grid is loading */}\r\n                <GridItem xs={12}>\r\n                    {/* Get Similar Movies */}\r\n                    {(similarMovies.length > 0) ? (<MovieHeader>{t(\"movie:similar\").replace(\"{MOVIE}\",moviesValue.title)}</MovieHeader>) : (<LoaderSpinner />)}                   \r\n                    <MoviesListings props={similarMovies} />\r\n                </GridItem>\r\n            </GridContainer>\r\n        </MovieContainer>\r\n    );\r\n}","//#region Imports\r\n\r\n// Import react components\r\nimport React from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\n\r\n// Import redux action\r\nimport {ACTION_SET_ERROR} from '../Store/actions/Action'\r\n\r\n// Import custom components\r\nimport MovieId from '../components/MovieId';\r\n\r\n/**\r\n * LatesMovie function\r\n *  \r\n * This function renders the searched for movie by reading the id from the url and then proceeding to render the movie using the MovieId component\r\n * \r\n * @name MoviePage\r\n * @function\r\n * @param {String} language the language by which to retrieve the movie\r\n * @param {String} genre the gernres by which to retrieve the movie || THIS IS NOT BEING USED\r\n * @param {Boolean} adult a flag to indicate whether adult movies should be rendered as well\r\n * @param {Boolean} render a flag to indicate whether an error was encountered\r\n * @param {Dispatch} error The dispatch action to set the render state to false and cause the screen to default to the error screen\r\n * @returns {Component} the movieId component rendering the latest movie or redirects to the error screen\r\n */\r\nfunction MoviePage({language, adult, genre, render, error}) {\r\n    return (\r\n        render ? (<MovieId movieId={parseInt(window.location.pathname.split(\"/\")[3])} language={language} adult={adult} genre={genre} error={error}/>) : (<Redirect to={\"./Error\"} />)\r\n    );\r\n}\r\n\r\n// states to be retrieved from the redux store\r\nconst mapStateToProps =  state => {  \r\n    return {\r\n        language: state.language,\r\n        adult: state.adult,\r\n        genre: state.genre,\r\n        render: state.render\r\n    }\r\n}\r\n \r\n// actions to be retrieved from the reducers \r\nconst mapDispatchToProps = dispatch => ({\r\n    error: () => dispatch(ACTION_SET_ERROR())\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MoviePage);"],"sourceRoot":""}