{"version":3,"sources":["components/MoviesListings/MovieListing/index.js","components/MoviesListings/index.js","assets/StyledComponents/Movie.jsx","components/Movie/index.js","components/MovieId/index.js","Pages/LatestMovie.jsx"],"names":["MovieListing","movie","movieRatingClass","imageSource","poster_path","unavailable_poster_image","config","TMDB","POSTER_ROOT_W342","t","useTranslation","vote_average","to","id","MovieCard","GridItem","xs","title","className","src","genre_ids","map","genre","key","genreRetriever","toLowerCase","MoviesListings","movie_props","path","window","location","pathname","split","props","GridContainer","direction","justify","alignItems","length","prop","sm","md","lg","xl","toLocaleLowerCase","LoaderSpinner","MovieContainer","styled","div","MovieTitle","MovieSubTitle","p","MovieHomepage","a","MovieInformation","MovieTitleInformation","span","MovieNumberInformation","MovieHeader","h1","MovieSectionHeader","MovieSmallText","MovieOverview","MovieBody","MovieVideo","MoviePoster","img","MovieGenre","Movie","video","useEffect","ACTION_MOVIE_SEARCH","POSTER_ROOT_W780","icon","faStar","color","vote_count","faStopwatch","runtime","tagline","href","homepage","urlCleaner","overview","release_date","faCalendarAlt","faFileInvoice","numberLocalisation","budget","faHandHoldingUsd","revenue","genres","name","site","url","playing","width","height","controls","MovieId","movieId","language","error","useState","moviesValue","setMoviesValue","similarMovies","setSimilarMovies","videos","setVideos","currentMovie","setCurrentMovie","currentGenre","setCurrentGenre","currentLanguage","setCurrentLanguage","MovieBackgroundElement","BACKDROP_ROOT","backdrop_path","GetMovies","Api_QueryMovie","Api_Similar","Api_Videos","replace","connect","state","locale","adult","render","dispatch","clear_movies","ACTION_CLEAR_ALL_MOVIES","ACTION_SET_ERROR","GetLatestMovie","Api_Latest","movie_id"],"mappings":"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","file":"static/js/5.38d5108d.chunk.js","sourcesContent":["//#region Imports\r\n\r\n// Import react components\r\nimport React from 'react';\r\nimport { Link } from \"react-router-dom\";\r\n\r\n// Import multilanguage component\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\n// Import image\r\nimport unavailable_poster_image from \"../../../assets/images/unavailable_movie_poster.jpg\"\r\n\r\n// Import grid components\r\nimport GridItem from \"../../Grid/GridItem.jsx\";\r\n\r\n// Import custom configurations functions\r\nimport {config} from '../../../config';\r\n\r\n// Import custom helper functions\r\nimport {genreRetriever} from '../../../Helpers'\r\n\r\n// Import styled components\r\nimport {MovieCardPoster, MovieCardTitle, MovieCardItem, MovieRating, MovieCardElement, MovieCardGenre, MovieCardGenres} from \"../../../assets/StyledComponents/MovieCard\";\r\n\r\n//#endregion\r\n\r\n/**\r\n * MovieListing function\r\n *  \r\n * This function takes a single movie object as a parameter and then uses Grid Items to style it. The parent component which will request this file will have a wrapping\r\n * GridContainer component.\r\n * \r\n * @name MovieListing\r\n * @function\r\n * @param {Object} movie the movie object to create the card\r\n * @returns {Componet} A styled component from the passed movie object. The returned component will be wrapped around a link component to the movie. The link will then take the\r\n * user to the movie search page.\r\n */\r\nexport default function MovieListing(movie){\r\n  // A let is used to declare the movie rating due to a looping error when using use state\r\n  let movieRatingClass = \"Average\";\r\n  //The movie poster to be rendered on the left. In the case that no movie poster is returned the custom unavailable_poster_image image is used\r\n  const imageSource = movie.movie.poster_path === null ? unavailable_poster_image : config.TMDB.POSTER_ROOT_W342+movie.movie.poster_path;\r\n  // Get the translation component to be used to switch between different languages\r\n  const { t } = useTranslation(\"\");\r\n\r\n  //set the movie rating for the red, grey, green colours.\r\n  switch (true){\r\n    case (movie.movie.vote_average <= 4): movieRatingClass = \"Bad\"; break;\r\n    case (movie.movie.vote_average < 7): movieRatingClass = \"Average\"; break;\r\n    case (movie.movie.vote_average >= 7): movieRatingClass = \"Good\"; break;\r\n    default: break;\r\n  }\r\n\r\n  return(\r\n    //Wrap the movie card with a link to the same move\r\n    <Link to={`/Movie/${movie.movie.id}`}>\r\n        <MovieCardItem>\r\n          <GridItem xs={12}>\r\n            {/*Movie Title*/}\r\n            <MovieCardTitle>{movie.movie.title}</MovieCardTitle>\r\n            {/*Movie Card and Rating Element*/}\r\n            <MovieCardElement>\r\n              <MovieRating>\r\n                <div className={movieRatingClass}>{movie.movie.vote_average}/10</div>\r\n              </MovieRating>\r\n              <MovieCardPoster src={imageSource}></MovieCardPoster>\r\n            </MovieCardElement>\r\n            <br />\r\n          </GridItem>\r\n          {/*Movie Genres*/}\r\n          <GridItem xs={12}>\r\n            <MovieCardGenres>{movie.movie.genre_ids.map((genre, key) => <MovieCardGenre key={key}><i>{t(`genres:${genreRetriever(genre).toLowerCase()}`)}</i></MovieCardGenre>)}</MovieCardGenres>\r\n          </GridItem>\r\n        </MovieCardItem>\r\n    </Link>\r\n  );\r\n}","//#region Imports\r\n\r\n// Import react components\r\nimport React from 'react';\r\n\r\n// Import grid components\r\nimport GridItem from \"../Grid/GridItem.jsx\";\r\nimport GridContainer from \"../Grid/GridContainer.jsx\";\r\n\r\n// Import multilanguage component\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\n// Import custom components\r\nimport MovieListing from './MovieListing';\r\nimport LoaderSpinner from '../../components/LoaderSpinner'\r\n\r\n// Import styled components\r\nimport {MovieCardContainer, MovieHeader} from \"../../assets/StyledComponents/MovieCard\";\r\n\r\n//#endregion\r\n\r\n/**\r\n * MovieListing function\r\n *  \r\n * This function takes a list of movie objects as a parameter and then uses a Grid Container and the MovieListing components to render a grid of movie cards.\r\n * \r\n * @name MoviesListings\r\n * @function\r\n * @param {Object} movie_props a list of movie object to create cards for\r\n * @returns {StyledComponent} A styled component from the passed movie object. The returned component will be wrapped around a link component to the movie. The link will then take the\r\n * user to the movie search page.\r\n */\r\nexport default function MoviesListings(movie_props){\r\n  // Get the translation component to be used to switch between different languages\r\n  const { t } = useTranslation(\"\");\r\n  const path = window.location.pathname.split(\"/\")[2];\r\n\r\n  return(\r\n    //Render the movie grid. While the movie grid is being built a spinner is shown\r\n    movie_props.props ? (\r\n      <MovieCardContainer>\r\n        <GridContainer \r\n          direction=\"row\"\r\n          justify=\"space-evenly\"\r\n          alignItems=\"center\"\r\n        >\r\n          {(movie_props.props.length > 0)\r\n            ? (movie_props.props.map((prop, key) => {\r\n              return(\r\n                <GridItem key={key} xs={12} sm={12} md={6} lg={4} xl={3}>\r\n                  <MovieListing movie={prop} />\r\n                </GridItem>\r\n              );\r\n            })\r\n            ):(\r\n              //if path is in movie do not show this message as that is part of the similar movies\r\n              path && path.toLocaleLowerCase() !== \"movie\" &&  path.toLocaleLowerCase() !== \"latest\" ? <MovieHeader>{t(\"common:no_results\")}</MovieHeader> : <></>\r\n            )}\r\n        </GridContainer >\r\n      </MovieCardContainer>\r\n    ): (<LoaderSpinner />)\r\n  );\r\n}","//#region Imports\r\n\r\n// Import react styled components\r\nimport styled from 'styled-components';\r\n\r\n//#endregion \r\n\r\n//#region Exported Styled Components\r\n\r\nexport const MovieContainer = styled.div` \r\n    margin-bottom: 50px;\r\n`;\r\n\r\nexport const MovieTitle = styled.div`\r\n    font: Europa;\r\n    color: white;\r\n    font-size: 50px;\r\n    float: left;\r\n`;\r\n\r\nexport const MovieSubTitle = styled.p`\r\n    color: white;\r\n    font-size: 20px;\r\n    margin-bottom: 15px;\r\n    text-align: initial;\r\n\r\n    :before {        \r\n        content: open-quote;\r\n    }\r\n\r\n    :after {        \r\n        content: close-quote;\r\n    }\r\n`;\r\n\r\nexport const MovieHomepage = styled.a`\r\n    color: #93c9ff !important;\r\n    float: left;\r\n`;\r\n\r\nexport const MovieInformation = styled.div`  \r\n    color: white;\r\n    font-size: 20px;\r\n    margin-bottom: 20px;\r\n    text-align: initial;\r\n\r\n    svg {\r\n        margin-right: 10px;\r\n    }\r\n`\r\n\r\nexport const MovieTitleInformation = styled.span`  \r\n    color: white;\r\n    font-size: 18px;\r\n    margin-bottom: 20px;\r\n    margin-left: 20px;\r\n    text-align: initial;\r\n\r\n    svg {\r\n        margin-right: 10px;\r\n    }\r\n`\r\n\r\nexport const MovieNumberInformation = styled.div`\r\n    display: inline-block;\r\n    color: white;\r\n    font-size: 18px;\r\n    margin-bottom: 20px;\r\n    margin-right: 20px;\r\n    float: left;\r\n\r\n    svg {\r\n        margin-right: 10px;\r\n    }\r\n\r\n    .small {\r\n        font-size: 12px;\r\n    }\r\n`\r\n\r\nexport const MovieInformationContainer = styled.div`  \r\n    margin: 20px 0;\r\n`\r\n\r\nexport const MovieHeader = styled.h1`\r\n    color: white;\r\n    text-align: center;\r\n    margin: 25px;\r\n    font-weight: 400;\r\n`;\r\n\r\nexport const MovieSectionHeader = styled.h1`\r\n    color: white;\r\n    text-align: initial;\r\n    font-weight: 400;\r\n`;\r\n\r\nexport const MovieSmallText = styled.span`\r\n    font-size: 12px;\r\n`;\r\n\r\nexport const MovieOverview = styled.p`\r\n    color: white;\r\n    font-size: 16px;\r\n    line-height: 1.5;\r\n    text-align: justify;\r\n`;\r\n\r\nexport const MovieBody = styled.div`\r\n    text-align: center;\r\n    width: auto;\r\n`;\r\n\r\nexport const MovieVideo = styled.div`\r\n    position: relative;\r\n    width: auto;\r\n    margin: 25px auto 60px auto;\r\n`;\r\n\r\nexport const MoviePoster = styled.img`\r\n    width: 70%;\r\n    height: auto;\r\n    border-radius: 10px;\r\n    margin-bottom: 20px;\r\n`;\r\n\r\nexport const MovieGenre = styled.div`\r\n    width: auto;\r\n    color: white;\r\n    margin-right: 15px;\r\n    border-radius: 10px;\r\n    border: solid 1px;\r\n    padding: 0.25em;\r\n    display: inline-block;\r\n    float: left;\r\n    margin-bottom: 10px;\r\n`;\r\n\r\n//#endregion \r\n","//#region Imports\r\n\r\n// Import react components\r\nimport React, { useEffect } from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faCalendarAlt, faStar, faStopwatch, faHandHoldingUsd, faFileInvoice } from '@fortawesome/free-solid-svg-icons'\r\nimport ReactPlayer from 'react-player';\r\n\r\n// Import multilanguage component\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\n// Import grid components\r\nimport GridItem from \"../Grid/GridItem.jsx\";\r\nimport GridContainer from \"../Grid/GridContainer.jsx\";\r\n\r\n// Import styled components\r\nimport {MoviePoster, MovieTitle, MovieVideo, MovieSubTitle, MovieOverview, MovieInformation, MovieTitleInformation, MovieSmallText, MovieNumberInformation, MovieHomepage, MovieHeader, MovieGenre, MovieSectionHeader} from '../../assets/StyledComponents/Movie';\r\n\r\n// Import images\r\nimport unavailable_poster_image from \"../../assets/images/unavailable_movie_poster.jpg\"\r\n\r\n// Import Redux actions\r\nimport {ACTION_MOVIE_SEARCH} from '../../Store/actions/Action'\r\n\r\n// Import custom helper functions\r\nimport {urlCleaner, numberLocalisation} from '../../Helpers'\r\n\r\n// Import custom configurations functions\r\nimport {config} from '../../config';\r\n\r\n//#endregion \r\n\r\n/**\r\n * Movie function\r\n *  \r\n * This function takes two parametes; movie and video, to style and render all the details related to a movie. The backdrop and the similar movies are still handled by the \r\n * MovieId file.\r\n * \r\n * @name Movie\r\n * @function\r\n * @param {Object} movie the movie object as returned from TMDB\r\n * @param {Object} video the video object as returned from TMDB\r\n * @returns {GridContainer} A GridContainer containing several different GridItems all containing different styled aspects of a movie.\r\n */\r\nexport default function Movie({movie, video}) {\r\n    // Get the translation component to be used to switch between different languages\r\n    const { t } = useTranslation(\"\");\r\n\r\n    //Remove the current search as the user would have just searched for something\r\n    useEffect(() => {\r\n        ACTION_MOVIE_SEARCH(\"\")\r\n    },[]);\r\n    \r\n    return (\r\n        <GridContainer\r\n        direction=\"row\"\r\n        justify=\"center\"\r\n        alignItems=\"flex-start\">\r\n            {/* The movie poster to be rendered on the left. In the case that no movie poster is returned the custom unavailable_poster_image image is used */}\r\n            <GridItem xs={12} sm={12} md={4}>\r\n                {(movie.poster_path !== \"\" && movie.poster_path !== null) ?\r\n                    (\r\n                        <MoviePoster src={`${config.TMDB.POSTER_ROOT_W780}/${movie.poster_path}`} />\r\n                    ) : \r\n                    (\r\n                        <MoviePoster src={unavailable_poster_image} />\r\n                    )\r\n                }\r\n            </GridItem>\r\n            {/* The movie details to be shown on the right hand side of the poster. These are further contained within another nested GridContainer */}\r\n            <GridItem xs={12} sm={12} md={8}>\r\n                <GridContainer\r\n                    direction=\"row\"\r\n                    justify=\"space-between\"\r\n                    alignItems=\"flex-start\"\r\n                >\r\n                    {/* Movie Title */}\r\n                    <GridItem sm={12} md={6}>\r\n                        <MovieTitle>\r\n                            {movie.title}\r\n                        </MovieTitle>\r\n                    </GridItem>\r\n                    {/* Movie Rating and Runtime */}\r\n                    <GridItem sm={12} md={6}>\r\n                        <MovieTitleInformation>\r\n                            <FontAwesomeIcon icon={faStar}  color=\"darkgoldenrod\" /> {movie.vote_average}/10 <MovieSmallText>{movie.vote_count} {t(\"movie:voters\")}</MovieSmallText>\r\n                        </MovieTitleInformation>\r\n                        <MovieTitleInformation>\r\n                            <FontAwesomeIcon icon={faStopwatch} color=\"white\"/> {movie.runtime} <MovieSmallText>{t(\"movie:minutes\")}</MovieSmallText>\r\n                        </MovieTitleInformation>\r\n                    </GridItem>\r\n                    {/* Movie Tagline which will have inverted commas inserted through css by the MovieSubTitle styled component */}\r\n                    <GridItem xs={12}>\r\n                    {(movie.tagline !== \"\") ?\r\n                        (\r\n                            <MovieSubTitle>\r\n                                {movie.tagline}\r\n                            </MovieSubTitle>\r\n                        ) : (<></>)\r\n                    }\r\n                    </GridItem>\r\n                    {/* Movie HomePage */}\r\n                    <GridItem xs={12}>\r\n                        <MovieHomepage href={`${movie.homepage}`}>\r\n                            {/* The url cleaner is used to remove the prefix http/s protocols and any trailing '/' */}\r\n                            {urlCleaner(movie.homepage)}\r\n                        </MovieHomepage>\r\n                    </GridItem>\r\n                    {/* Movie OverView */}\r\n                    <GridItem xs={12}>\r\n                        <MovieOverview>\r\n                            {movie.overview}\r\n                        </MovieOverview>\r\n                    </GridItem>\r\n                    {/* Movie Release Date */}\r\n                    <GridItem xs={12}>\r\n                        {(movie.release_date !== \"\") ?\r\n                            (\r\n                                <>\r\n                                    <MovieSectionHeader>{t(\"movie:release\")}</MovieSectionHeader>\r\n                                    <MovieInformation>\r\n                                        <FontAwesomeIcon icon={faCalendarAlt} color=\"white\" /> {movie.release_date}\r\n                                    </MovieInformation>\r\n                                </>\r\n                            ) \r\n                            : \r\n                            (<></>)\r\n                        }\r\n                    </GridItem>\r\n                    {/* Movie Budget and Revenue */}\r\n                    <GridItem xs={12}>\r\n                        <MovieSectionHeader>{t(\"movie:numbers\")}</MovieSectionHeader>\r\n                            <MovieNumberInformation>\r\n                                <FontAwesomeIcon icon={faFileInvoice} color=\"red\" /> {t(\"movie:budget\")} {numberLocalisation(movie.budget)}\r\n                            </MovieNumberInformation>\r\n                            <MovieNumberInformation>\r\n                                <FontAwesomeIcon icon={faHandHoldingUsd} color=\"lightgreen\" /> {t(\"movie:revenue\")} {numberLocalisation(movie.revenue)}\r\n                            </MovieNumberInformation>\r\n                    </GridItem>\r\n                    {/* Movie Genres */}\r\n                    <GridItem xs={12}>\r\n                        {(movie.genres.length > 0 ? <MovieSectionHeader>{t(\"genres:title\")}</MovieSectionHeader> : <></>)}\r\n                        {(movie.genres ? (movie.genres.map((genre, key) => <MovieGenre key={key}>{t(`genres:${genre.name.toLowerCase()}`)}</MovieGenre>)) : (<></>))}\r\n                    </GridItem>\r\n                </GridContainer>\r\n            </GridItem>\r\n            <GridItem xs={12} md={6}>\r\n                {/* Get Related Videos. For simplicity's sake only 1 youtube video is shown*/}\r\n                {video && video.site === 'YouTube' && (\r\n                    <MovieVideo>\r\n                        <MovieHeader>{t(\"movie:trailer\")}</MovieHeader>\r\n                        <ReactPlayer \r\n                            url={`https://www.youtube.com/embed/${video.key}`} \r\n                            playing={true}\r\n                            width=\"100%\" \r\n                            height=\"450px\"\r\n                            controls={true} \r\n                        />\r\n                    </MovieVideo> \r\n                )}\r\n            </GridItem>\r\n        </GridContainer>\r\n    );\r\n}","//#region Imports\r\n\r\n// Import react components\r\nimport React, { useEffect, useState } from 'react';\r\n\r\n// Import multilanguage component\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\n// Import grid components\r\nimport GridContainer from '../Grid/GridContainer';\r\nimport GridItem from '../Grid/GridItem';\r\n\r\n// Import custom components\r\nimport Movie from '../../components/Movie';\r\nimport LoaderSpinner from '../../components/LoaderSpinner';\r\nimport MoviesListings from '../../components/MoviesListings';\r\n\r\n// Import api functions\r\nimport {Api_QueryMovie, Api_Similar, Api_Videos} from '../../api';\r\n\r\n// Import custom configurations functions\r\nimport {config} from '../../config';\r\n\r\n// Import styled components and the styled component from react as it is needed for the backdrop\r\nimport styled from 'styled-components';\r\nimport {MovieContainer, MovieBody, MovieHeader} from '../../assets/StyledComponents/Movie';\r\n\r\n//#endregion\r\n\r\n/**\r\n * MovieId function\r\n *  \r\n * This function takes three parametes; movieId, language and genre, to carry out api requests and then render all the movie. Using styled components and other custom components \r\n * such as Movie\r\n * \r\n * @name MovieId\r\n * @function\r\n * @param {Int16Array} movieId the id of the movie to get from TMDB\r\n * @param {String} language the language of the movie object to be retrieved from TMDB\r\n * @param {String} genre the genre of the similar movies to be retrieved from TMDB\r\n * @param {Dispatch Function} error the dispatch function to trigger an error page rendering\r\n * @returns {StyledComponent} A styled component movie container which will have all the movie components within it.\r\n */\r\nexport default function MovieId({movieId, language, genre, error}) {\r\n    // Current rendered movie useStates\r\n    const [moviesValue, setMoviesValue] = useState(\"\");\r\n    const [similarMovies, setSimilarMovies] = useState(\"\");\r\n    const [videos, setVideos] = useState([]);\r\n    const [currentMovie, setCurrentMovie] = useState(-1);\r\n    const [currentGenre, setCurrentGenre] = useState(-1);\r\n    const [currentLanguage, setCurrentLanguage] = useState('en');\r\n\r\n    // Get the translation component to be used to switch between different languages\r\n    const { t } = useTranslation(\"\");\r\n\r\n    // Create a styled component with the backdrop related to the movie object\r\n    const MovieBackgroundElement = styled.div`    \r\n        background: url(${config.TMDB.BACKDROP_ROOT}/${moviesValue.backdrop_path}) center center / cover no-repeat fixed;\r\n        position: fixed;\r\n        top: 0px;\r\n        filter: saturate(0.5) opacity(0.3);\r\n        width: 100%;\r\n        max-width: 100%;\r\n        height: 100%;\r\n        z-index: -1;\r\n    `\r\n\r\n    // On every page update check if the page parameters have changed.\r\n    useEffect(() => {\r\n        const GetMovies = async () => {\r\n            setMoviesValue(await Api_QueryMovie(movieId, language, false, error));     \r\n            setSimilarMovies(await Api_Similar(movieId, language, genre, error));  \r\n            const videos = await Api_Videos(movieId, language, error);\r\n            //Otherwise this causes an error\r\n            if(videos.length > 0)\r\n                setVideos(...videos);  \r\n            else    \r\n                setVideos([]);\r\n        }\r\n\r\n        // If current Movie (the one that is rendered on screen) is different from the passed movieId and language parameters then update the current movie\r\n        // Otherwise do nothing. This condition safeguards against an infinite update loop\r\n        if(currentMovie !== movieId || currentLanguage !== language || currentGenre !== genre){\r\n            setCurrentMovie(movieId);\r\n            setCurrentLanguage(language);\r\n            setCurrentGenre(genre)\r\n            GetMovies();\r\n        }\r\n    })\r\n\r\n    return (\r\n        <MovieContainer>\r\n            {/* The backdrop element to be used as a canvas */}\r\n            {(moviesValue.backdrop_path) ? (\r\n                <MovieBackgroundElement />\r\n            ): (<></>)}\r\n            {/* The grid container whose children will display the movie (using the Movie custom component) and a grid of similar movies */}\r\n            <GridContainer\r\n                direction=\"row\"\r\n                justify=\"space-between\"\r\n                alignItems=\"flex-start\"\r\n            >\r\n                {/* The movie details. A spinner will be shown while the movie is loading */}\r\n                <GridItem xs={12}>\r\n                    <MovieBody>\r\n                        <section className=\"Results\">\r\n                            {moviesValue && videos ? (<Movie movie={moviesValue} video={videos}/>) : (<LoaderSpinner />)}\r\n                        </section>\r\n                    </MovieBody> \r\n                </GridItem>  \r\n                {/* The similar movies grid. A spinner will be shown while the movie grid is loading */}\r\n                <GridItem xs={12}>\r\n                    {/* Get Similar Movies */}\r\n                    {(similarMovies.length > 0) ? (<MovieHeader>{t(\"movie:similar\").replace(\"{MOVIE}\",moviesValue.title)}</MovieHeader>) : (<LoaderSpinner />)}                   \r\n                    <MoviesListings props={similarMovies} />\r\n                </GridItem>\r\n            </GridContainer>\r\n        </MovieContainer>\r\n    );\r\n}","//#region Imports\r\n\r\n// Import react components\r\nimport React, { useEffect, useState } from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\nimport {connect} from 'react-redux';\r\n\r\n// Import redux action\r\nimport {ACTION_CLEAR_ALL_MOVIES, ACTION_SET_ERROR} from '../Store/actions/Action'\r\n\r\n// Import api function\r\nimport {Api_Latest} from '../api';\r\n\r\n// Import custom component\r\nimport MovieId from '../components/MovieId';\r\n\r\n//#endregion\r\n\r\n/**\r\n * LatesMovie function\r\n *  \r\n * This function renders the latest movie by calling the latest api and then proceeding to render the movie using the MovieId component\r\n * \r\n * @name LatestMovie\r\n * @function\r\n * @param {String} locale the locale from which to retrieve the latest movie\r\n * @param {String} language the language from which to retrieve the latest movie\r\n * @param {Boolean} adult a flag to indicate whether adult movies should be rendered as well\r\n * @param {Boolean} render a flag to indicate whether an error was encountered\r\n * @param {Dispatch} clear_movies the dispatch action to clear all the movies from the grid\r\n * @param {Dispatch} error The dispatch action to set the render state to false and cause the screen to default to the error screen\r\n * @returns {Component} the movieId component rendering the latest movie or redirects to the error screen\r\n */\r\nfunction LatesMovie({locale, language, adult, render, clear_movies, error}) {\r\n    //store the movie id of the latest movie in a useState\r\n    const [moviesValue, setMoviesValue] = useState(0);\r\n\r\n    //Carry out the get latest movie on page load\r\n    useEffect(() => {\r\n        const GetLatestMovie = async () => {\r\n            const movie_id = await Api_Latest(locale, error);\r\n            setMoviesValue(movie_id);\r\n        }\r\n\r\n        clear_movies();\r\n        GetLatestMovie();\r\n    },[])\r\n\r\n    return (\r\n        (render ? (moviesValue > 0 ? (<MovieId movieId={moviesValue} language={language} adult={adult} error={error}/>) : (<></>)) : (<Redirect to={\"./Error\"} />))\r\n    );\r\n}\r\n  \r\n// states to be retrieved from the redux store\r\nconst mapStateToProps =  state => {  \r\n    return {\r\n        locale: state.locale,\r\n        language: state.language,\r\n        adult: state.adult,\r\n        render: state.render\r\n    }\r\n}\r\n  \r\n// actions to be retrieved from the reducers\r\nconst mapDispatchToProps = dispatch => ({\r\n    clear_movies: () => dispatch(ACTION_CLEAR_ALL_MOVIES()),\r\n    error: () => dispatch(ACTION_SET_ERROR())\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(LatesMovie);\r\n"],"sourceRoot":""}