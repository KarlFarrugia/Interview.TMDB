{"version":3,"sources":["Pages/UpcomingMovies.jsx"],"names":["connect","state","page","language","region","genre","adult","movies","render","dispatch","append_movies","query","ACTION_APPEND_MOVIES","set_page","ACTION_SET_PAGE","clear_movies","ACTION_CLEAR_ALL_MOVIES","error","ACTION_SET_ERROR","useState","currentPage","setCurrentPage","currentLanguage","setCurrentLanguage","currentGenre","setCurrentGenre","currentAdult","setCurrentAdult","maxPage","SetMaxPage","useEffect","a","Api_Upcoming","GetMovies","props","to"],"mappings":"mOAwGeA,uBApBU,SAAAC,GACrB,MAAO,CACHC,KAAMD,EAAMC,KACZC,SAAUF,EAAME,SAChBC,OAAQH,EAAMG,OACdC,MAAOJ,EAAMI,MACbC,MAAOL,EAAMK,MACbC,OAAQN,EAAMM,OACdC,OAAQP,EAAMO,WAKK,SAAAC,GAAQ,MAAK,CACpCC,cAAe,SAAAC,GAAK,OAAIF,EAASG,YAAqBD,KACtDE,SAAU,SAAAX,GAAI,OAAIO,EAASK,YAAgBZ,KAC3Ca,aAAc,kBAAMN,EAASO,gBAC7BC,MAAO,kBAAMR,EAASS,mBAGXlB,EA9Df,YAAyH,IAAtGE,EAAqG,EAArGA,KAAMC,EAA+F,EAA/FA,SAAUC,EAAqF,EAArFA,OAAQC,EAA6E,EAA7EA,MAAOC,EAAsE,EAAtEA,MAAOC,EAA+D,EAA/DA,OAAQC,EAAuD,EAAvDA,OAAQE,EAA+C,EAA/CA,cAAeG,EAAgC,EAAhCA,SAAUE,EAAsB,EAAtBA,aAAcE,EAAQ,EAARA,MAAQ,EAC9EE,oBAAU,GADoE,mBAC7GC,EAD6G,KAChGC,EADgG,OAEtEF,mBAAS,MAF6D,mBAE7GG,EAF6G,KAE5FC,EAF4F,OAG5EJ,mBAAS,GAHmE,mBAG7GK,EAH6G,KAG/FC,EAH+F,OAI5EN,oBAAS,GAJmE,mBAI7GO,EAJ6G,KAI/FC,EAJ+F,OAKtFR,mBAAS,GAL6E,mBAK7GS,EAL6G,KAKpGC,EALoG,KAwBpH,OAjBAC,qBAAU,WAAM,4CACZ,sBAAAC,EAAA,kEACIF,EADJ,SACqBG,YAAatB,EAAeR,EAAMC,EAAUC,EAAQC,EAAOC,EAAOW,GADvF,8EADY,sBAOTG,IAAgBlB,GAAQoB,IAAoBnB,GAAYqB,IAAiBnB,GAASqB,IAAiBpB,IAClGiB,EAAmBpB,GACnBsB,EAAgBpB,GAChBsB,EAAgBrB,GAChBe,EAAenB,GACfa,IAZS,WAAD,wBAaRkB,MAEN,CAACb,EAAalB,EAAMoB,EAAiBnB,EAAUqB,EAAcnB,EAAOqB,EAAcpB,EAAOI,EAAeN,EAAQa,EAAOF,IAGrHP,EACI,kBAAC,IAAD,KACI,kBAAC,IAAD,KACK,kBAAC,IAAD,CAAgB0B,MAAO3B,KAE5B,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAQqB,QAASA,EAAS1B,KAAMA,EAAMW,SAAUA,MAIxD,kBAAC,IAAD,CAAUsB,GAAI","file":"static/js/11.0f6aaa6a.chunk.js","sourcesContent":["//#region Imports\r\n\r\n// Import react components\r\nimport React, {useEffect, useState} from 'react';\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { connect } from 'react-redux';\r\n\r\n// Import redux actions\r\nimport { ACTION_APPEND_MOVIES, ACTION_SET_PAGE, ACTION_CLEAR_ALL_MOVIES, ACTION_SET_ERROR } from '../Store/actions/Action'\r\n\r\n// Import api function\r\nimport { Api_Upcoming } from '../api'\r\n\r\n// Import custom components\r\nimport MoviesListings from '../components/MoviesListings';\r\nimport Paging from '../components/Paging'\r\n\r\n// Import custom styled components\r\nimport { App, Section } from '../assets/StyledComponents/App'\r\n\r\n//#endregion\r\n\r\n/**\r\n * Upcoming function\r\n *  \r\n * This function renders upcoming movies by calling the upcoming api and then proceeding to render the movies using the MoviesListings component\r\n * \r\n * @name TopRated\r\n * @function\r\n * @param {Int16Array} page the current page to be rendered\r\n * @param {String} language the language by which to retrieve the upcoming movies\r\n * @param {String} region the region from which to retrieve the upcoming movies\r\n * @param {String} genre the genre by which to retrieve the latest movie\r\n * @param {Boolean} adult a flag to indicate whether adult movies should be rendered as well\r\n * @param {Array} movies the list of movies to be rendered\r\n * @param {Boolean} render a flag to indicate whether an error was encountered\r\n * @param {Dispatch} append_movies the dispatch action to add an array to the upcoming movie state\r\n * @param {Dispatch} set_page the dispatch action to set the new page number in the pagination\r\n * @param {Dispatch} clear_movies the dispatch action to clear all the movies from the grid\r\n * @param {Dispatch} error The dispatch action to set the render state to false and cause the screen to default to the error screen\r\n * @returns {Component} the movieId component rendering the latest movie or redirects to the error screen\r\n */\r\nfunction Upcoming({page, language, region, genre, adult, movies, render, append_movies, set_page, clear_movies, error}) {\r\n    const [currentPage, setCurrentPage] = useState(-1);\r\n    const [currentLanguage, setCurrentLanguage] = useState('en');\r\n    const [currentGenre, setCurrentGenre] = useState(0);\r\n    const [currentAdult, setCurrentAdult] = useState(false);\r\n    const [maxPage, SetMaxPage] = useState(1);\r\n\r\n    useEffect(() => {\r\n        async function GetMovies() {\r\n            SetMaxPage(await Api_Upcoming(append_movies, page, language, region, genre, adult, error));\r\n        }\r\n\r\n        // If current Movie Selection (the one that is rendered on screen) is different from the passed parameters then update the current movie selection\r\n        // Otherwise do nothing. This condition safeguards against an infinite update loop\r\n        if(currentPage !== page || currentLanguage !== language || currentGenre !== genre || currentAdult !== adult){\r\n            setCurrentLanguage(language);\r\n            setCurrentGenre(genre);\r\n            setCurrentAdult(adult);\r\n            setCurrentPage(page);\r\n            clear_movies();\r\n            GetMovies();\r\n        }\r\n    },[currentPage, page, currentLanguage, language, currentGenre, genre, currentAdult, adult, append_movies, region, error, clear_movies]);\r\n\r\n    return (\r\n        render ? (\r\n            <App>\r\n                <Section>\r\n                    {<MoviesListings props={movies} />}\r\n                </Section>\r\n                <Section>\r\n                    <Paging maxPage={maxPage} page={page} set_page={set_page}/>\r\n                </Section>\r\n            </App>\r\n        ) : (\r\n            <Redirect to={\"./Error\"} />\r\n        ) \r\n        \r\n    );\r\n}\r\n\r\n// states to be retrieved from the redux store\r\nconst mapStateToProps =  state => {  \r\n    return {\r\n        page: state.page,\r\n        language: state.language,\r\n        region: state.region,\r\n        genre: state.genre,\r\n        adult: state.adult,\r\n        movies: state.movies,\r\n        render: state.render\r\n    }\r\n}\r\n\r\n// actions to be retrieved from the reducers\r\nconst mapDispatchToProps = dispatch => ({\r\n    append_movies: query => dispatch(ACTION_APPEND_MOVIES(query)),\r\n    set_page: page => dispatch(ACTION_SET_PAGE(page)),\r\n    clear_movies: () => dispatch(ACTION_CLEAR_ALL_MOVIES()),\r\n    error: () => dispatch(ACTION_SET_ERROR())\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Upcoming);\r\n  "],"sourceRoot":""}